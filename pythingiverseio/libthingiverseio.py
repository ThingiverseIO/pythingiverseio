# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libthingiverseio', [dirname(__file__)])
        except ImportError:
            import _libthingiverseio
            return _libthingiverseio
        if fp is not None:
            try:
                _mod = imp.load_module('_libthingiverseio', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libthingiverseio = swig_import_helper()
    del swig_import_helper
else:
    import _libthingiverseio
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def new_intp():
    return _libthingiverseio.new_intp()
new_intp = _libthingiverseio.new_intp

def copy_intp(value):
    return _libthingiverseio.copy_intp(value)
copy_intp = _libthingiverseio.copy_intp

def delete_intp(obj):
    return _libthingiverseio.delete_intp(obj)
delete_intp = _libthingiverseio.delete_intp

def intp_assign(obj, value):
    return _libthingiverseio.intp_assign(obj, value)
intp_assign = _libthingiverseio.intp_assign

def intp_value(obj):
    return _libthingiverseio.intp_value(obj)
intp_value = _libthingiverseio.intp_value

def tvio_version(major, minor, fix):
    return _libthingiverseio.tvio_version(major, minor, fix)
tvio_version = _libthingiverseio.tvio_version

def tvio_check_descriptor(descriptor):
    return _libthingiverseio.tvio_check_descriptor(descriptor)
tvio_check_descriptor = _libthingiverseio.tvio_check_descriptor

def tvio_new_input(descriptor):
    return _libthingiverseio.tvio_new_input(descriptor)
tvio_new_input = _libthingiverseio.tvio_new_input

def tvio_get_input_uuid(input, uuid, uuid_size):
    return _libthingiverseio.tvio_get_input_uuid(input, uuid, uuid_size)
tvio_get_input_uuid = _libthingiverseio.tvio_get_input_uuid

def tvio_remove_input(input):
    return _libthingiverseio.tvio_remove_input(input)
tvio_remove_input = _libthingiverseio.tvio_remove_input

def tvio_connected(input, arg2):
    return _libthingiverseio.tvio_connected(input, arg2)
tvio_connected = _libthingiverseio.tvio_connected

def tvio_start_listen(input, function):
    return _libthingiverseio.tvio_start_listen(input, function)
tvio_start_listen = _libthingiverseio.tvio_start_listen

def tvio_stop_listen(input, function):
    return _libthingiverseio.tvio_stop_listen(input, function)
tvio_stop_listen = _libthingiverseio.tvio_stop_listen

def tvio_call(input, function, params, params_size):
    return _libthingiverseio.tvio_call(input, function, params, params_size)
tvio_call = _libthingiverseio.tvio_call

def tvio_call_all(input, function, params, params_size):
    return _libthingiverseio.tvio_call_all(input, function, params, params_size)
tvio_call_all = _libthingiverseio.tvio_call_all

def tvio_trigger(input, function, params, params_size):
    return _libthingiverseio.tvio_trigger(input, function, params, params_size)
tvio_trigger = _libthingiverseio.tvio_trigger

def tvio_trigger_all(input, function, params, params_size):
    return _libthingiverseio.tvio_trigger_all(input, function, params, params_size)
tvio_trigger_all = _libthingiverseio.tvio_trigger_all

def tvio_result_ready(input, id, ready):
    return _libthingiverseio.tvio_result_ready(input, id, ready)
tvio_result_ready = _libthingiverseio.tvio_result_ready

def tvio_retrieve_result_params(input, id):
    return _libthingiverseio.tvio_retrieve_result_params(input, id)
tvio_retrieve_result_params = _libthingiverseio.tvio_retrieve_result_params

def tvio_listen_result_available(input, arg2):
    return _libthingiverseio.tvio_listen_result_available(input, arg2)
tvio_listen_result_available = _libthingiverseio.tvio_listen_result_available

def tvio_retrieve_listen_result_id(input):
    return _libthingiverseio.tvio_retrieve_listen_result_id(input)
tvio_retrieve_listen_result_id = _libthingiverseio.tvio_retrieve_listen_result_id

def tvio_retrieve_listen_result_function(input):
    return _libthingiverseio.tvio_retrieve_listen_result_function(input)
tvio_retrieve_listen_result_function = _libthingiverseio.tvio_retrieve_listen_result_function

def tvio_retrieve_listen_result_params(input):
    return _libthingiverseio.tvio_retrieve_listen_result_params(input)
tvio_retrieve_listen_result_params = _libthingiverseio.tvio_retrieve_listen_result_params

def tvio_retrieve_next_call_all_result_params(input, id):
    return _libthingiverseio.tvio_retrieve_next_call_all_result_params(input, id)
tvio_retrieve_next_call_all_result_params = _libthingiverseio.tvio_retrieve_next_call_all_result_params

def tvio_new_output(descriptor):
    return _libthingiverseio.tvio_new_output(descriptor)
tvio_new_output = _libthingiverseio.tvio_new_output

def tvio_get_output_uuid(output, uuid, uuid_size):
    return _libthingiverseio.tvio_get_output_uuid(output, uuid, uuid_size)
tvio_get_output_uuid = _libthingiverseio.tvio_get_output_uuid

def tvio_remove_output(output):
    return _libthingiverseio.tvio_remove_output(output)
tvio_remove_output = _libthingiverseio.tvio_remove_output

def tvio_request_available(output, arg2):
    return _libthingiverseio.tvio_request_available(output, arg2)
tvio_request_available = _libthingiverseio.tvio_request_available

def tvio_get_next_request_id(output):
    return _libthingiverseio.tvio_get_next_request_id(output)
tvio_get_next_request_id = _libthingiverseio.tvio_get_next_request_id

def tvio_retrieve_request_function(output, id):
    return _libthingiverseio.tvio_retrieve_request_function(output, id)
tvio_retrieve_request_function = _libthingiverseio.tvio_retrieve_request_function

def tvio_retrieve_request_params(output, id):
    return _libthingiverseio.tvio_retrieve_request_params(output, id)
tvio_retrieve_request_params = _libthingiverseio.tvio_retrieve_request_params

def tvio_reply(output, id, params, params_size):
    return _libthingiverseio.tvio_reply(output, id, params, params_size)
tvio_reply = _libthingiverseio.tvio_reply

def tvio_emit(output, function, in_params, in_params_size, params, params_size):
    return _libthingiverseio.tvio_emit(output, function, in_params, in_params_size, params, params_size)
tvio_emit = _libthingiverseio.tvio_emit
# This file is compatible with both classic and new-style classes.


